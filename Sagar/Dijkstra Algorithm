<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dijkstra Algorithm Code</title>

    <!-- Prism.js CSS for Syntax Highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/themes/prism.min.css">

    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            background: linear-gradient(to right, #e0f7fa, #80deea);
            color: #333;
        }

        h1 {
            text-align: center;
            color: #004d40;
            margin-bottom: 20px;
        }

        pre {
            background: #263238;
            color: #eceff1;
            padding: 15px;
            border-radius: 8px;
            overflow-x: auto;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        code {
            font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
        }

        /* Media Query for Laptops */
        @media (max-width: 1024px) {
            body {
                margin: 15px;
                font-size: 16px;
            }

            h1 {
                font-size: 24px;
            }

            pre {
                font-size: 14px;
            }
        }

        /* Media Query for Phones */
        @media (max-width: 480px) {
            body {
                margin: 10px;
                font-size: 14px;
            }

            h1 {
                font-size: 18px;
            }

            pre {
                font-size: 12px;
                padding: 10px;
            }
        }
    </style>
</head>
<body>

<h1>Dijkstra Algorithm Code</h1>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;

using namespace std;

class Solution
{
    public:
    vector &lt;int&gt; dijkstra(int V, vector&lt;vector&lt;int&gt;&gt; adj[], int S)
    {
        set&lt;pair&lt;int,int&gt;&gt; st; 
        vector&lt;int&gt; dist(V, 1e9); 

        st.insert({0, S}); 
        dist[S] = 0;

        while(!st.empty()) {
            auto it = *(st.begin()); 
            int node = it.second; 
            int dis = it.first; 
            st.erase(it); 

            for(auto it : adj[node]) {
                int adjNode = it[0]; 
                int edgW = it[1]; 

                if(dis + edgW &lt; dist[adjNode]) {
                    if(dist[adjNode] != 1e9)
                        st.erase({dist[adjNode], adjNode}); 

                    dist[adjNode] = dis + edgW; 
                    st.insert({dist[adjNode], adjNode}); 
                 }
            }
        }
        return dist; 
    }
};

int main()
{
    int V = 3, E = 3, S = 2;
    vector&lt;vector&lt;int&gt;&gt; adj[V];
    vector&lt;vector&lt;int&gt;&gt; edges;
    vector&lt;int&gt; v1{1, 1}, v2{2, 6}, v3{2, 3}, v4{0, 1}, v5{1, 3}, v6{0, 6};
    int i = 0;
    adj[0].push_back(v1);
    adj[0].push_back(v2);
    adj[1].push_back(v3);
    adj[1].push_back(v4);
    adj[2].push_back(v5);
    adj[2].push_back(v6);

    Solution obj;
    vector&lt;int&gt; res = obj.dijkstra(V, adj, S);

    for (int i = 0; i &lt; V; i++)
    {
        cout &lt;&lt; res[i] &lt;&lt; " ";
    }
    cout &lt;&lt; endl;
    return 0;
}</code></pre>

<!-- Prism.js for Syntax Highlighting -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/prism.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-cpp.min.js"></script>

</body>
</html>

